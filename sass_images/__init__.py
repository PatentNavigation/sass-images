from __future__ import unicode_literals

import base64
import os
import mimetypes
from PIL import Image


TRANSLATE = (
    ('-' * 48) +  # Control characters
    "0123456789" +  # Numbers (keep as is)
    ('-' * 7) +  # Punctuation
    "abcdefghijklmnopqrstuvwxyz" +  # Uppercase
    ('-' * 6) +  # Punctuation
    "abcdefghijklmnopqrstuvwxyz" +  # Lowercase
    ('-' * 133)  # Misc and extended ASCII
)


def get_relpath(root, path):
    # This does assume that path begins with root
    assert path.startswith(root)
    relpath = path[len(root):]
    if relpath.startswith('/'):
        relpath = relpath[1:]
    return relpath


def get_variable_from_path(root, path, prefix='img'):
    "Given a path to an image and root directory, generate the SASS variable name for the file."
    relpath = get_relpath(root, path)

    # Strip off the extension and convert to lowercase
    relpath = os.path.splitext(relpath)[0].translate(TRANSLATE)

    # Translate any bad characters
    return '${}-{}'.format(prefix, relpath)


def get_image_dimensions(path):
    "Returns the width and height of the file"
    with Image.open(path) as im:
        return im.size


def get_image_mimetype(path):
    return mimetypes.guess_type(path)[0]


def get_image_url(path, urlpath, threshold):
    if os.path.getsize(path) > threshold:
        # Just get the filename?
        url = urlpath
    else:
        mimetype = get_image_mimetype(path)
        with open(path, 'rb') as f:
            data = base64.b64encode(f.read())
        url = 'data:{};base64,{}'.format(mimetype, data.decode('ascii'))

    return "url('{}')".format(url)


PROLOG = """// This file was generated by sass-images:
// https://github.com/PatentNavigation/sass-images
// DO NOT EDIT THIS FILE.
//
// To regenerate this file:
// sass-images.py -d {dir} --inline-threshold={threshold} --url-prefix={prefix}
//

"""

ENTRY = """// {urlpath}
{variable}-url: {url};
{variable}-width: {width}px;
{variable}-height: {height}px;

"""


def generate_sass_from_dir(dir, output, threshold, urlprefix, prolog=True):
    if prolog:
        output.write(PROLOG.format(dir=dir, threshold=threshold, prefix=urlprefix))
    for root, dirs, files in os.walk(dir):
        for name in files:
            path = os.path.join(root, name)
            variable = get_variable_from_path(dir, path)
            try:
                width, height = get_image_dimensions(path)
            except IOError:
                continue

            urlpath = urlprefix + get_relpath(dir, path)
            url = get_image_url(path, urlpath, threshold)
            output.write(ENTRY.format(variable=variable, urlpath=urlpath, url=url, width=width, height=height))
